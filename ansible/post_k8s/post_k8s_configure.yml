---
- name: Add User to Docker Group
  hosts: node1,node2,node3
  become: yes

  vars:
    insecure_registry: "registry.kube-system.svc.cluster.local:5000"

  tasks:
    - name: Add user 'cc' to docker group
      user:
        name: cc
        groups: docker
        append: yes

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - name: Verify Docker group membership for user 'cc'
      command: id cc
      register: cc_id

    - name: Show user groups
      debug:
        msg: "{{ cc_id.stdout }}"

---
- name: Configure DNS and Restart CoreDNS
  hosts: node1,node2,node3
  become: yes
  tasks:
    - name: Set DNS for interface ens4
      command: resolvectl dns ens4 127.0.0.1

- name: Restart CoreDNS on node1
  hosts: node1
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  tasks:
    - name: Restart CoreDNS deployment
      command: kubectl -n kube-system rollout restart deployment coredns

- name: Configure CoreDNS across all nodes
  hosts: all
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  vars:
    dns_search_domains: "openstacklocal"

  tasks:
    - name: Get CoreDNS ClusterIP (run only on master)
      command: kubectl get svc -n kube-system kube-dns -o jsonpath='{.spec.clusterIP}'
      register: coredns_ip_raw
      delegate_to: node1
      run_once: true

    - name: Set CoreDNS IP as fact
      set_fact:
        coredns_ip: "{{ coredns_ip_raw.stdout }}"

    - name: Disable systemd-resolved
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: no

    - name: Remove existing resolv.conf
      file:
        path: /etc/resolv.conf
        state: absent
        force: true

    - name: Write custom resolv.conf
      copy:
        dest: /etc/resolv.conf
        content: |
          nameserver {{ coredns_ip }}
          search {{ dns_search_domains }}
        mode: '0644'

---
- name: Deploy local Docker registry (HTTP) to kube-system
  hosts: master  # or localhost
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  tasks:

    - name: Apply local registry pod and service
      shell: |
        cat <<EOF | kubectl apply -n kube-system -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: registry
          labels:
            app: registry
        spec:
          containers:
            - name: registry
              image: registry:2.8.1
              ports:
                - containerPort: 5000
              env:
                - name: REGISTRY_HTTP_ADDR
                  value: ":5000"
              volumeMounts:
                - name: registry-storage
                  mountPath: /var/lib/registry
          volumes:
            - name: registry-storage
              emptyDir: {}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: registry
        spec:
          selector:
            app: registry
          ports:
            - port: 5000
              targetPort: 5000
        EOF
      args:
        executable: /bin/bash

---
- name: Install ArgoCD CLI
  hosts: node1
  become: yes
  tasks:
    - name: Download ArgoCD CLI binary
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        dest: "/usr/local/bin/argocd"
        mode: '0755'

    - name: Verify ArgoCD CLI installation
      command: argocd version --client
      register: argocd_version
      ignore_errors: yes

    - name: Show ArgoCD version
      debug:
        msg: "{{ argocd_version.stdout_lines }}"

- name: Install ArgoCD to Kubernetes
  hosts: master
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config

  tasks:
    - name: Create argocd namespace
      shell: kubectl create namespace argocd
      register: argocd_ns
      failed_when: argocd_ns.rc != 0 and 'AlreadyExists' not in argocd_ns.stderr
      changed_when: "'created' in argocd_ns.stdout.lower()"

    - name: Install ArgoCD
      shell: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      args:
        executable: /bin/bash

    - name: Wait for ArgoCD admin secret to exist
      shell: kubectl -n argocd get secret argocd-initial-admin-secret
      register: check_argocd_secret
      retries: 10
      delay: 6
      until: check_argocd_secret.rc == 0

    - name: Fetch ArgoCD initial admin password
      shell: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_admin_password
      changed_when: false

    - name: Show ArgoCD admin password
      debug:
        msg: "ArgoCD admin password: {{ argocd_admin_password.stdout }}"

- name: Install Argo Workflows
  hosts: node1
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  tasks:
    - name: Create argo namespace
      command: kubectl create namespace argo
      register: argo_ns
      failed_when: argo_ns.rc != 0 and 'AlreadyExists' not in argo_ns.stderr
      changed_when: "'created' in argo_ns.stdout.lower()"

    - name: Install Argo Workflows
      shell: |
        kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.6.5/quick-start-minimal.yaml
      args:
        executable: /bin/bash

- name: Install Argo Events
  hosts: node1
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  tasks:
    - name: Create argo-events namespace
      command: kubectl create namespace argo-events
      register: argo_events_ns
      failed_when: argo_events_ns.rc != 0 and 'AlreadyExists' not in argo_events_ns.stderr
      changed_when: "'created' in argo_events_ns.stdout.lower()"

    - name: Install Argo Events
      shell: |
        kubectl apply -n argo-events -f https://github.com/argoproj/argo-events/releases/download/v1.9.6/install.yaml
      args:
        executable: /bin/bash

- name: Copy ArgoCD admin secret to Argo Workflows namespace
  hosts: node1
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  vars:
    source_namespace: argocd
    target_namespace: argo
    secret_name: argocd-initial-admin-secret

  tasks:
    - name: Get ArgoCD admin secret YAML
      command: >
        kubectl get secret {{ secret_name }} -n {{ source_namespace }} -o yaml
      register: secret_yaml

    - name: Modify namespace in secret YAML
      set_fact:
        updated_secret_yaml: >-
          {{ secret_yaml.stdout
            | regex_replace('namespace: .*', 'namespace: ' ~ target_namespace)
            | regex_replace('  resourceVersion: .*', '')
            | regex_replace('  uid: .*', '')
            | regex_replace('  creationTimestamp: .*', '') }}

    - name: Apply secret to target namespace
      shell: |
        echo "{{ updated_secret_yaml }}" | kubectl apply -n {{ target_namespace }} -f -
      register: apply_result

    - name: Show apply result
      debug:
        var: apply_result.stdout

- name: Disable IPv6 on Internet-facing interface
  hosts: all
  become: true
  tasks:

    - name: Create sysctl config to disable IPv6
      copy:
        dest: /etc/sysctl.d/99-disable-ipv6.conf
        content: |
          net.ipv6.conf.ens3.disable_ipv6 = 1
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl settings immediately
      command: sysctl --system

- name: Install local-path-provisioner and set as default
  hosts: node1
  become: yes
  environment:
    KUBECONFIG: /home/cc/.kube/config
  tasks:
    - name: Apply local-path-provisioner manifest
      command: kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml

    - name: Set local-path as the default storage class
      command: >
        kubectl patch storageclass local-path
        -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

# - name: Reboot target node
#   hosts: all
#   become: yes
#   tasks:
#     - name: Reboot the system
#       reboot:

- name: Initial Stuff
  hosts: all
  become: yes
  tasks:
    - name: Updates
      apt:
        update_cache: yes

    - name: Disable SWAP
      shell: |
        swapoff -a

    - name: Disable SWAP in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

- name: Install Docker using official GPG + keyrings method
  hosts: all
  become: true
  tasks:
    - name: Install dependencies
      apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker APT repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
        https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo ${UBUNTU_CODENAME:-$VERSION_CODENAME}) stable" > /etc/apt/sources.list.d/docker.list
      args:
        executable: /bin/bash

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Create containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: Add containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: Configuring Systemd cgroup driver for containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: "            SystemdCgroup = false"
        line: "            SystemdCgroup = true"

    - name: Enable the containerd service and start service
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes

- name: Kubernetes Dependencies
  hosts: all
  become: yes
  tasks:
    - name: Add Kubernetes apt-key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: "0644"
        force: true

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        update_cache: yes
        
    - name: Install Kubelet
      apt:
        name: kubelet
        state: present
        update_cache: true

    - name: Install Kubeadm
      apt:
        name: kubeadm
        state: present

    - name: Enable the Kubelet service
      service:
        name: kubelet
        enabled: yes

    # NEW
    - name: Persist br_netfilter module
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: "br_netfilter\n"

    - name: Load br_netfilter immediately
      modprobe:
        name: br_netfilter
        state: present

    - name: Persist sysctl settings
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl settings
      command: sysctl --system

    # OLD
    # - name: Load br_netfilter kernel module
    #   modprobe:
    #     name: br_netfilter
    #     state: present

    # - name: Set bridge-nf-call-iptables
    #   sysctl:
    #     name: net.bridge.bridge-nf-call-iptables
    #     value: 1

    # - name: Set ip_forward
    #   sysctl:
    #     name: net.ipv4.ip_forward
    #     value: 1
 
- name: Set kubelet node IP
  hosts: all
  become: true
  tasks:
    - name: Ensure /etc/default/kubelet has correct node-ip
      lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: "KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}"
        create: yes

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        
- hosts: master
  become: yes
  tasks:
    - name: Install Kubectl
      apt:
        name: kubectl
        state: present
        force: yes